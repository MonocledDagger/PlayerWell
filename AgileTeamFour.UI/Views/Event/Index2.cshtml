@model IEnumerable<AgileTeamFour.UI.ViewModels.EventDetailsVM>
@{
    ViewData["Title"] = "All Events";
}

<h1 class="text-center">All Events</h1>

<p class="text-center">
    <a class="btn btn-primary btn-lg ml-3" asp-action="Create">Create New</a>
</p>
<p>
    <a class="btn btn-secondary" asp-area="" asp-controller="Event" asp-action="Index">View Cards</a>
</p>
<!-- Start Event filter component-->
<div>
    <div id="search-filters" class="mb-3">
        <h3>Filter Events</h3>
        <div class="form-group">
            <label>
                <input type="checkbox" id="filter-by-game" onclick="toggleDropdown('game-dropdown')" />
                Game Name
            </label>
            <select id="game-dropdown" class="form-control d-none" name="gameName">
                <option value="">-- Select Game --</option>
                @foreach (var game in Model.Select(m => m.Game.GameName).Distinct())
                {
                    <option value="@game">@game</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label>
                <input type="checkbox" id="filter-by-author" onclick="toggleDropdown('author-dropdown')" />
                Author Name
            </label>
            <select id="author-dropdown" class="form-control d-none" name="authorName">
                <option value="">-- Select Author --</option>
                @foreach (var author in Model.Select(m => m.AuthorName).Distinct())
                {
                    <option value="@author">@author</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>
                <input type="checkbox" id="filter-by-guild" onclick="toggleDropdown('guild-dropdown')" />
                Guild Name
            </label>
            <select id="guild-dropdown" class="form-control d-none" name="guildName">
                <option value="">-- Select Guild --</option>
                @foreach (var guild in Model.Select(m => m.Guild?.GuildName ?? "No Guild").Distinct())
                {
                    <option value="@guild">@guild</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label>
                <input type="checkbox" id="filter-by-date" onclick="toggleDropdown('date-dropdowns')" />
                Event Date
            </label>
            <div id="date-dropdowns" class="d-none">
                <label for="start-date">Search Start Date</label>
                <input type="date" id="start-date" name="startDate" class="form-control mb-2" />
                <label for="end-date">Search End Date</label>
                <input type="date" id="end-date" name="endDate" class="form-control" />
            </div>
        </div>

        <button type="button" class="btn btn-primary mt-2" onclick="applyFilters()">Search</button>
        <!-- Reset Button -->
        <a class="btn btn-secondary mt-2" asp-controller="Event" asp-action="Index">Clear Filters </a>
    </div>
</div>
<!-- End Event filter component-->
@if (!Model.Any())
{
    <tr>
        <td colspan="10" class="text-center">
            <h3>No Events Found. Change your Event Filters and Try Again.</h3>
        </td>
    </tr>
}
else {
    <div class="table-responsive">
<table class="table table-hover">
    <thead>
        <tr>
@*             <th>
                @Html.DisplayNameFor(model => model.Event.EventID)
            </th> *@
            <th>
                @Html.DisplayNameFor(model => model.Game.GameName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Event.EventName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Event.Server)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Event.MaxPlayers)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Event.Type)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Event.Platform)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Event.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Event.DateTime)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
    @foreach (var item in Model) {
        <tr>
@*             <td>
                @Html.DisplayFor(modelItem => item.Event.EventID)
            </td> *@
            <td>
                @Html.DisplayFor(modelItem => item.Game.GameName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Event.EventName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Event.Server)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Event.MaxPlayers)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Event.Type)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Event.Platform)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Event.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Event.DateTime)
            </td>
                    <td>
                        <a asp-action="Details" asp-route-id="@item.Event.EventID" class="btn btn-primary btn-sm btn-touching">Details</a>|
                    <a asp-action="Edit" asp-route-id="@item.Event.EventID" class="btn btn-secondary btn-sm btn-touching">Edit</a>|
                    
                    <a asp-action="Delete" asp-route-id="@item.Event.EventID" class="btn btn-danger btn-sm btn-touching">Delete</a>
                
            </td>
        </tr>
    }
    </tbody>
        </table>
    </div>
}

<!-- Scripts for the event filtering -->
<script>
    function toggleDropdown(dropdownId) {
        const dropdown = document.getElementById(dropdownId);
        dropdown.classList.toggle("d-none");
    }

    function applyFilters() {
        const filters = {
            gameName: document.getElementById('game-dropdown').value,
            authorName: document.getElementById('author-dropdown').value,
            guildName: document.getElementById('guild-dropdown').value,
            startDate: document.getElementById('start-date').value,
            endDate: document.getElementById('end-date').value
        };

        // Redirect to the controller with the selected filters as query parameters
        const query = Object.entries(filters)
            .filter(([key, value]) => value) // Exclude empty filters
            .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)
            .join('&');

        window.location.href = `/Event/Index2?${query}`;
    }

        // Save the scroll position before the page unloads
    window.addEventListener('beforeunload', function () {
        localStorage.setItem('scrollPosition', window.scrollY);
    });

    // Restore the scroll position after the page loads
    window.addEventListener('load', function () {
        const scrollPosition = localStorage.getItem('scrollPosition');
        if (scrollPosition) {
            window.scrollTo(0, parseInt(scrollPosition, 10));
        }
    });
</script>

